#define USE_ESP8266        // compile for esp8266 board
#define BLYNK_PRINT Serial // Defines the object that is used for printing
// #define BLYNK_DEBUG        // Optional, this enablecs more detailed prints
#define USE_ESP8266_WIFI_MANAGER

#define DISPLAY_DEBUG_BLYNK_STATUS

#define wifimanager_timeout_setup 120    // 30 seconds timeout on setup only
#define wifimanager_timeout_reconnect 60 // 30 seconds timeout on reconnect attempts

//========== END SWITCHES ======================


#ifdef USE_ESP8266
#include <ArduinoJson.h>
#include <ESP8266WiFi.h>
#include <BlynkSimpleEsp8266.h>
// #include <BlynkSimpleEsp8266_SSL.h>
#include <ArduinoOTA.h>
#include <WiFiManager.h> //https://github.com/tzapu/WiFiManager
// #include <SimpleTimer.h>    // already part of BlynkTimer
#include <TimeLib.h>
#include <WidgetRTC.h>
#include <IRremoteESP8266.h>
#include <IRsend.h>
#include <DHT.h>
#endif

BlynkTimer timer;

IRsend irsend(4);  // An IR LED is controlled by GPIO pin 4 (D2)
#define DHTPIN 0          // What digital pin we're connected to
#define DHTTYPE DHT11     // DHT 11
DHT dht(DHTPIN, DHTTYPE);
WidgetRTC rtc;
WidgetTerminal terminal(V7);

int wifisignal;

int timer_ids[5];
int counter = 0;
#define BaudRate 115200

// This is called when Smartphone App is opened
BLYNK_APP_CONNECTED() {
  Serial.println("App Connected.");
}

// This is called when Smartphone App is closed
BLYNK_APP_DISCONNECTED() {
  Serial.println("App Disconnected.");
}

char auth_code[] = "7ad2869aa6a84a2d8c856e1ea4a4235a";
char blynk_server[] = "blynk-cloud.com";

int brightness = 0;    // how bright the LED is
int fadeAmount = 5;    // how many points to fade the LED by

//Samsung Air Conditioner Raw Code

//On
uint16_t  On[347] = {3150,8900, 600,450, 600,1450, 650,400, 650,400, 650,400, 650,400, 650,400, 650,400, 650,400, 650,1400, 650,400, 650,400, 650,1450, 600,450, 600,450, 600,1400, 600,1400, 650,1400, 650,1400, 650,1400, 650,400, 650,400, 650,400, 600,400, 650,400, 650,400, 650,400, 600,450, 600,450, 550,500, 600,450, 600,450, 600,450, 600,450, 650,400, 600,400, 600,400, 650,400, 650,400, 650,400, 600,400, 650,400, 600,450, 600,400, 600,450, 600,450, 600,450, 550,500, 550,500, 550,500, 600,450, 600,450, 600,1400, 650,1400, 650,1400, 650,1400, 600,2950, 3100,8900, 600,1450, 600,450, 550,500, 550,500, 550,500, 500,550, 550,500, 550,500, 600,450, 600,1400, 600,450, 600,450, 600,1400, 600,450, 600,1450, 600,1400, 600,1500, 550,1500, 500,1500, 550,1450, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 550,450, 600,450, 550,450, 550,450, 600,450, 600,500, 550,500, 550,500, 500,550, 550,500, 550,500, 550,500, 600,450, 600,450, 550,450, 550,450, 600,450, 550,450, 550,450, 600,450, 550,450, 550,450, 600,450, 550,500, 550,500, 550,500, 500,550, 550,500, 550,500, 550,2950, 3100,8950, 600,1450, 600,450, 600,450, 600,450, 550,450, 550,450, 550,450, 550,450, 550,500, 550,1500, 550,500, 600,450, 500,1500, 550,500, 550,1450, 600,1450, 600,450, 550,1450, 600,1450, 600,1450, 600,1450, 600,1450, 600,1500, 500,1500, 550,1500, 550,500, 550,500, 550,450, 550,1450, 600,1450, 600,1450, 600,450, 550,450, 550,450, 550,500, 550,500, 550,500, 550,500, 550,500, 500,550, 550,1500, 550,1450, 600,450, 550,1450, 600,1450, 600,450, 550,450, 550,500, 550,450, 550,450, 550,500, 550,500, 550,1500, 500,1500, 550,1500, 550,1450, 600};  // SONY 0

//Off
uint16_t  Off[347] = {3100,8900, 550,500, 550,1500, 600,450, 600,450, 550,450, 600,450, 550,450, 550,500, 550,500, 600,1450, 600,450, 550,500, 600,1450, 550,1450, 550,500, 550,1500, 550,1500, 600,1450, 550,1450, 550,1450, 550,500, 550,450, 550,450, 550,450, 550,500, 550,500, 600,450, 550,450, 600,450, 550,450, 550,450, 550,500, 550,500, 600,450, 550,450, 500,550, 550,450, 600,450, 500,500, 550,500, 550,500, 500,500, 550,500, 550,500, 550,450, 550,500, 600,450, 550,500, 550,500, 550,500, 550,500, 600,450, 550,450, 550,500, 550,1450, 550,1450, 600,2950, 3050,8950, 600,1450, 550,500, 500,500, 550,500, 550,500, 500,550, 500,550, 550,500, 550,500, 600,1450, 550,450, 550,450, 550,1450, 550,500, 550,1450, 600,1450, 550,1450, 550,1450, 600,1450, 550,1500, 550,500, 550,500, 600,450, 550,500, 600,450, 550,500, 550,500, 550,450, 500,500, 550,500, 550,450, 500,500, 550,500, 550,450, 550,450, 500,500, 550,500, 550,500, 550,500, 550,500, 600,450, 600,450, 550,450, 550,500, 600,450, 550,500, 500,500, 550,500, 550,450, 500,500, 550,500, 550,500, 500,500, 550,500, 550,500, 550,500, 550,2950, 3100,8950, 600,1450, 550,500, 500,550, 550,500, 500,500, 550,500, 550,500, 550,450, 550,450, 550,1450, 550,450, 550,500, 550,1450, 550,1500, 550,1500, 600,1450, 550,500, 500,1500, 550,1500, 550,1500, 550,1450, 550,1450, 550,1500, 550,1450, 550,1500, 500,550, 600,450, 600,450, 550,1450, 550,1500, 600,1450, 600,450, 550,450, 550,450, 600,450, 550,500, 600,450, 600,450, 600,450, 600,450, 600,1500, 550,1500, 600,450, 600,1450, 600,1450, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 600,1450, 600,1450, 600};  // SONY 0

//Temperature T16
uint16_t  T16[231] = {3100,8900, 600,450, 600,1450, 600,450, 600,450, 600,450, 600,450, 550,450, 600,450, 600,450, 600,1450, 600,450, 600,450, 600,1450, 600,450, 600,450, 600,1450, 600,1450, 600,1450, 600,1450, 600,1450, 550,450, 550,500, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 600,1450, 600,1450, 550,1500, 550,1450, 600,2900, 3100,8900, 600,1450, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 600,1450, 550,450, 550,450, 550,450, 550,1450, 600,1450, 600,1450, 600,450, 600,1450, 600,1450, 600,1450, 600,1450, 600,1450, 550,1450, 550,1450, 550,1450, 600,450, 600,450, 600,450, 600,1450, 600,1450, 600,1450, 600,450, 600,450, 600,450, 600,450, 600,450, 550,450, 600,450, 500,500, 550,500, 550,1450, 600,450, 550,1500, 600,450, 600,1450, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 600,1450, 550,1500, 550,1500, 550,1500, 600};  // SONY 0

//T17
uint16_t  T17[231] = {3100,8900, 650,400, 650,1400, 650,450, 600,450, 600,450, 600,450, 550,500, 600,400, 600,400, 650,1400, 650,400, 650,400, 650,1400, 650,400, 650,400, 650,1400, 650,1400, 600,1450, 600,1450, 600,1450, 600,400, 600,450, 650,400, 650,400, 600,400, 650,400, 600,400, 650,400, 650,400, 650,400, 650,400, 600,400, 600,400, 600,450, 600,450, 600,450, 550,500, 600,450, 600,450, 600,400, 600,400, 600,400, 600,400, 600,400, 600,400, 600,450, 600,450, 600,450, 600,400, 600,450, 600,450, 600,450, 600,1450, 550,1500, 600,1450, 600,1400, 650,2950, 3100,8900, 650,1400, 600,400, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 550,1500, 550,500, 550,500, 550,1450, 600,450, 600,1450, 600,1450, 600,450, 600,1450, 600,1450, 600,1450, 600,1450, 600,1500, 500,1500, 550,1450, 550,1450, 600,450, 600,450, 600,450, 600,1450, 600,1450, 600,1450, 600,450, 600,450, 600,450, 600,500, 550,500, 500,1500, 550,500, 550,500, 600,450, 600,1450, 600,450, 600,1450, 600,450, 600,1450, 600,450, 600,450, 600,450, 600,450, 600,450, 600,500, 550,450, 550,1500, 550,1450, 550,1450, 600,1450, 600};  // SONY 0

//T18
uint16_t  T18[231] = {3050,9000, 550,500, 550,1450, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 600,1450, 600,450, 600,450, 550,1500, 600,450, 600,450, 600,1450, 500,1500, 600,1450, 600,1400, 550,1450, 600,450, 600,450, 600,450, 600,450, 600,450, 550,500, 600,450, 600,450, 600,450, 550,500, 600,450, 550,500, 550,500, 550,500, 600,450, 600,450, 550,500, 600,450, 550,500, 600,450, 600,450, 600,450, 550,500, 600,450, 500,500, 550,500, 550,500, 600,450, 550,450, 550,500, 550,500, 500,500, 600,1450, 600,1400, 600,1450, 600,1450, 550,3000, 3050,8950, 600,1450, 550,500, 600,450, 550,500, 600,450, 550,500, 550,500, 500,550, 500,500, 550,1500, 550,500, 550,500, 500,1500, 550,500, 500,1500, 550,1500, 550,500, 550,1500, 550,1500, 550,1450, 500,1500, 550,1450, 550,1450, 550,1450, 550,1450, 550,500, 550,500, 550,500, 550,1500, 550,1500, 550,1500, 500,550, 500,550, 500,550, 500,500, 550,500, 550,500, 550,1500, 550,500, 550,500, 550,1500, 550,500, 550,1450, 550,500, 550,1500, 550,500, 500,550, 500,500, 500,550, 500,500, 550,500, 550,500, 550,1450, 550,1450, 550,1450, 550,1450, 600};  // SONY 0

//T19
uint16_t  T19[231] = {3150,8900, 600,450, 600,1400, 650,400, 650,400, 650,400, 650,400, 650,400, 650,400, 650,400, 650,1400, 650,400, 650,400, 650,1400, 650,450, 600,450, 600,1450, 600,1400, 600,1400, 650,1400, 650,1400, 650,400, 650,400, 650,400, 650,400, 650,400, 650,400, 650,400, 600,450, 600,450, 600,450, 550,500, 600,450, 600,400, 600,400, 650,400, 650,400, 650,400, 650,400, 650,400, 650,400, 650,400, 650,400, 650,400, 600,400, 650,400, 600,450, 600,450, 600,450, 550,500, 600,450, 600,450, 600,400, 600,1400, 650,1400, 650,1400, 650,1400, 650,2900, 3100,8900, 650,1400, 650,400, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 650,1400, 650,400, 650,400, 650,400, 600,400, 600,1400, 650,1400, 600,400, 600,1450, 600,1450, 600,1450, 600,1450, 600,1400, 650,1400, 650,1400, 650,1400, 600,400, 600,400, 600,400, 600,1400, 650,1450, 600,1450, 600,450, 600,450, 550,500, 600,450, 600,450, 600,1400, 600,1450, 650,400, 600,450, 600,1400, 600,400, 600,1400, 600,450, 600,1500, 600,450, 500,550, 550,500, 600,450, 600,450, 600,450, 600,450, 600,1450, 600,1400, 600,1400, 600,1400, 600};  // SONY 0

//T20
uint16_t  T20[231] = {3100,8900, 650,400, 600,1400, 650,400, 650,400, 650,400, 650,400, 600,400, 650,400, 600,450, 600,1450, 600,450, 600,450, 600,1400, 650,400, 650,400, 650,1400, 650,1400, 650,1400, 650,1400, 650,1400, 650,400, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 650,400, 650,400, 650,400, 600,400, 650,400, 650,400, 650,400, 650,400, 650,400, 600,400, 600,400, 600,400, 600,450, 600,450, 550,500, 600,450, 600,450, 600,400, 650,400, 650,400, 600,400, 600,400, 600,400, 650,400, 600,400, 650,1400, 650,1400, 650,1400, 650,1450, 650,2900, 3150,8900, 600,1450, 600,450, 650,400, 650,400, 600,400, 600,400, 650,400, 650,400, 650,400, 650,1400, 650,400, 600,400, 600,1450, 600,450, 600,1450, 550,1500, 600,450, 600,1400, 650,1400, 650,1400, 600,1450, 600,1400, 650,1400, 650,1400, 600,1450, 600,450, 500,550, 550,500, 600,1400, 550,1450, 600,1450, 650,400, 600,450, 600,450, 600,400, 600,400, 600,450, 600,450, 600,1400, 600,450, 600,1450, 550,500, 600,1450, 600,450, 600,1400, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 600,1450, 600,1500, 600,1450, 500,1500, 600};  // SONY 0

//T21
uint16_t  T21[231] = {3100,8900, 650,400, 650,1400, 650,450, 600,450, 600,450, 600,450, 600,450, 600,400, 650,400, 650,1400, 650,400, 650,400, 650,1400, 650,400, 650,400, 650,1400, 650,1400, 650,1450, 600,1450, 600,1450, 600,400, 600,450, 650,400, 650,400, 650,400, 650,400, 650,400, 650,400, 650,400, 650,400, 650,400, 650,400, 650,400, 650,400, 650,450, 600,450, 600,450, 600,450, 600,450, 650,400, 650,400, 650,400, 650,400, 650,400, 650,400, 650,400, 650,400, 650,400, 650,400, 650,400, 650,400, 650,400, 600,1450, 500,1500, 600,1400, 600,1400, 650,2900, 3100,8900, 650,1400, 650,400, 650,400, 650,400, 650,400, 650,400, 650,400, 600,400, 600,450, 600,1450, 600,450, 600,450, 600,450, 600,450, 650,1400, 650,1400, 650,400, 650,1400, 650,1400, 650,1400, 650,1400, 650,1450, 600,1450, 600,1450, 550,1450, 650,400, 650,400, 600,400, 650,1400, 650,1400, 600,1400, 650,400, 600,450, 600,450, 600,450, 550,500, 600,1450, 600,450, 550,1450, 600,450, 600,1400, 600,450, 600,1450, 600,450, 600,1450, 650,400, 600,400, 600,450, 600,400, 600,450, 600,500, 550,500, 550,1450, 600,1450, 550,1450, 600,1450, 600};  // SONY 0

//T22
uint16_t  T22[231] = {3100,8950, 600,450, 550,1450, 550,500, 500,500, 550,500, 550,500, 550,500, 550,450, 550,450, 550,1450, 550,500, 550,500, 550,1500, 550,500, 550,500, 600,1450, 550,1450, 550,1450, 550,1450, 550,1500, 550,500, 550,500, 550,450, 500,500, 550,500, 550,500, 500,550, 550,500, 500,550, 550,500, 600,450, 550,450, 500,500, 550,500, 500,500, 550,450, 550,500, 550,500, 550,450, 500,500, 550,500, 500,500, 500,500, 550,500, 550,500, 500,550, 550,500, 500,550, 600,450, 550,500, 500,500, 500,500, 500,1500, 550,1500, 550,1450, 550,1500, 550,3000, 3050,8950, 550,1500, 500,550, 500,550, 500,550, 600,450, 550,500, 500,550, 550,500, 500,500, 500,1500, 550,500, 500,500, 550,500, 500,500, 500,1500, 550,1500, 550,500, 500,1550, 500,1550, 600,1450, 550,1500, 500,1500, 550,1500, 550,1500, 550,1500, 550,500, 550,500, 500,500, 500,1500, 500,1550, 500,1550, 600,450, 550,450, 550,500, 500,550, 500,500, 500,500, 500,1500, 550,1500, 550,500, 500,1500, 550,500, 500,1500, 500,500, 500,1550, 500,550, 550,450, 550,500, 500,550, 500,500, 500,500, 500,500, 500,1500, 550,1500, 550,1500, 500,1500, 600};  // SONY 0

//T23
uint16_t  T23[231] = {3100,8900, 550,450, 550,1450, 600,450, 600,400, 600,400, 600,400, 600,450, 600,450, 600,450, 600,1400, 600,400, 600,450, 600,1400, 600,450, 600,450, 600,1450, 550,1500, 600,1450, 600,1400, 600,1400, 600,400, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 550,500, 550,500, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 550,500, 600,450, 600,450, 550,500, 550,500, 550,500, 600,1450, 600,1400, 600,1450, 550,1450, 600,2950, 3100,8900, 600,1400, 550,500, 600,450, 600,450, 600,450, 550,450, 500,550, 500,550, 500,550, 550,1450, 600,450, 600,450, 550,1450, 550,1450, 550,500, 550,1450, 600,450, 550,1500, 600,1450, 550,1450, 500,1500, 600,1450, 550,1450, 550,1450, 550,1450, 600,450, 550,500, 550,500, 550,1500, 550,1500, 600,1450, 600,450, 500,550, 500,500, 500,550, 550,500, 500,1500, 550,1450, 550,1450, 550,500, 550,1500, 550,500, 550,1500, 550,500, 500,1550, 600,450, 500,550, 500,550, 550,500, 500,500, 500,500, 500,500, 500,1500, 550,1500, 600,1450, 550,1450, 600};  // SONY 0

//T24
uint16_t  T24[231] = {3150,8900, 600,450, 600,1400, 600,400, 600,400, 600,400, 600,400, 600,400, 600,400, 600,400, 600,1400, 650,400, 600,400, 600,1400, 600,450, 600,450, 600,1450, 600,1450, 600,1400, 650,1400, 650,1400, 650,400, 650,400, 600,400, 600,400, 600,450, 600,400, 600,400, 600,450, 600,450, 600,450, 550,500, 600,450, 600,450, 600,450, 600,400, 600,400, 600,400, 600,450, 600,400, 600,450, 600,400, 600,450, 600,450, 600,450, 600,400, 600,450, 550,500, 600,450, 550,500, 600,450, 550,500, 550,450, 600,1450, 650,1400, 600,1450, 600,1400, 650,2900, 3050,8950, 600,1400, 600,450, 600,450, 550,500, 550,450, 550,500, 550,500, 550,500, 600,450, 600,1450, 600,400, 600,450, 600,1450, 600,450, 600,1400, 600,1450, 600,450, 600,1500, 600,1450, 550,1450, 600,1450, 600,1400, 600,1450, 600,1400, 600,1450, 600,450, 600,450, 600,450, 600,1450, 600,1500, 550,1500, 550,500, 550,500, 550,500, 550,450, 600,450, 600,450, 600,450, 600,450, 600,1450, 600,1450, 600,450, 600,1450, 600,450, 600,1500, 550,500, 500,550, 550,500, 550,500, 550,450, 600,450, 600,450, 600,1450, 600,1450, 600,1450, 600,1450, 550};  // SONY 0

//T25
uint16_t  T25[231] = {3100,8950, 600,450, 600,1450, 550,500, 550,500, 550,500, 550,500, 600,450, 550,450, 550,450, 500,1500, 550,500, 550,450, 550,1450, 550,500, 550,500, 550,1500, 600,1450, 550,1450, 550,1450, 550,1450, 600,450, 550,450, 600,450, 550,450, 550,450, 550,500, 550,450, 550,500, 550,500, 550,500, 600,450, 600,450, 600,450, 550,450, 550,450, 550,450, 600,450, 550,500, 550,450, 600,450, 550,450, 500,500, 550,450, 600,450, 550,450, 550,500, 550,500, 550,500, 600,450, 600,450, 550,450, 550,450, 600,1450, 600,1450, 550,1450, 600,1450, 600,3000, 3000,9000, 550,1450, 550,500, 550,500, 550,500, 500,550, 600,450, 600,450, 550,450, 550,450, 550,1450, 550,500, 550,450, 550,500, 600,450, 550,1450, 550,1450, 550,450, 500,1500, 500,1550, 600,1450, 600,1450, 550,1450, 550,1450, 550,1450, 550,1450, 550,450, 600,450, 500,500, 550,1450, 550,1500, 550,1500, 600,450, 600,450, 550,450, 600,450, 600,450, 550,1450, 550,500, 550,450, 500,1500, 550,1500, 600,450, 550,1450, 550,500, 550,1500, 550,500, 600,450, 550,500, 550,450, 550,500, 550,450, 600,450, 550,1450, 550,1450, 600,1450, 550,1450, 600};  // SONY 0

//T26
uint16_t  T26[231] = {3100,8950, 550,450, 550,1450, 600,450, 550,500, 550,500, 600,450, 600,450, 600,450, 600,450, 600,1450, 550,500, 550,500, 550,1450, 550,500, 550,500, 600,1450, 550,1450, 600,1450, 550,1500, 550,1450, 600,450, 550,500, 550,500, 600,450, 550,450, 550,500, 550,500, 550,500, 550,500, 600,450, 550,500, 550,500, 550,450, 550,500, 550,500, 550,500, 500,500, 500,500, 500,500, 550,500, 550,500, 550,500, 500,500, 550,500, 500,500, 550,500, 500,550, 600,450, 600,450, 550,500, 500,500, 550,500, 550,1500, 550,1450, 550,1500, 550,1500, 550,3000, 3000,9000, 550,1450, 550,500, 550,500, 550,500, 600,450, 500,550, 550,500, 550,500, 550,500, 500,1500, 550,500, 500,500, 500,500, 500,500, 550,1450, 550,1450, 500,500, 500,1550, 500,1550, 600,1450, 500,1500, 550,1500, 550,1500, 550,1500, 550,1500, 500,500, 500,500, 500,500, 500,1500, 500,1550, 500,1550, 600,450, 550,500, 500,500, 500,500, 550,500, 500,500, 550,1500, 550,500, 500,1500, 550,1500, 500,500, 500,1500, 500,550, 500,1550, 550,500, 550,500, 500,550, 550,500, 500,500, 500,500, 500,500, 500,1500, 550,1500, 550,1500, 550,1500, 600};  // SONY 0

//T27
uint16_t  T27[231] = {3100,8900, 550,500, 600,1450, 600,450, 600,450, 600,450, 600,450, 600,400, 600,450, 600,450, 600,1400, 600,450, 600,450, 600,1450, 600,450, 600,450, 600,1450, 550,1450, 600,1400, 600,1400, 600,1400, 600,400, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 550,500, 600,450, 550,450, 500,550, 600,450, 550,500, 550,500, 550,450, 600,450, 600,450, 600,400, 550,450, 600,450, 600,450, 600,450, 550,500, 550,450, 600,450, 600,450, 600,450, 550,500, 500,550, 600,450, 600,450, 600,1450, 600,1400, 600,1400, 600,1450, 600,3000, 3050,8950, 600,1400, 600,450, 600,450, 550,500, 550,450, 500,550, 550,500, 550,500, 550,500, 550,1450, 600,450, 550,450, 550,1450, 600,1400, 600,450, 550,1450, 550,500, 550,1500, 550,1500, 500,1500, 550,1500, 600,1400, 600,1450, 550,1450, 600,1450, 600,450, 550,450, 550,450, 550,1450, 550,1500, 550,1500, 500,550, 500,550, 550,500, 550,500, 550,450, 550,1450, 600,1450, 550,450, 550,1450, 600,1450, 550,450, 550,1450, 550,500, 550,1500, 500,550, 500,500, 550,500, 550,500, 550,450, 550,450, 550,450, 550,1450, 600,1450, 600,1450, 550,1450, 550};  // SONY 0

//T28
uint16_t  T28[231] = {3100,8950, 550,500, 550,1450, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 600,1400, 600,450, 600,450, 550,1450, 600,450, 600,450, 600,1450, 550,1500, 550,1450, 600,1400, 600,1450, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 550,500, 600,450, 550,500, 500,550, 600,450, 600,450, 550,500, 600,450, 600,450, 600,450, 600,450, 600,450, 550,500, 550,500, 600,450, 600,450, 550,500, 600,450, 550,500, 600,450, 500,550, 500,500, 550,500, 600,1450, 550,1450, 600,1450, 600,1450, 550,3000, 3000,9000, 600,1450, 550,500, 550,500, 600,450, 600,450, 550,500, 500,550, 550,500, 550,500, 550,1450, 550,500, 600,450, 550,500, 550,500, 550,1450, 550,1450, 550,500, 550,1500, 550,1500, 600,1450, 500,1500, 550,1450, 550,1450, 550,1450, 550,1450, 550,500, 550,500, 550,500, 550,1450, 550,1500, 550,1500, 550,500, 500,550, 500,550, 500,550, 550,500, 550,500, 550,500, 550,1450, 550,1450, 550,1450, 550,500, 550,1450, 550,500, 550,1500, 550,500, 550,500, 500,550, 500,500, 500,500, 550,500, 550,500, 550,1500, 550,1450, 550,1450, 550,1500, 600};  // SONY 0

//T29
uint16_t  T29[231] = {3050,9000, 600,450, 550,1450, 550,500, 550,450, 500,500, 550,450, 550,500, 550,450, 600,450, 600,1450, 600,450, 550,450, 550,1450, 600,450, 600,450, 550,1500, 600,1450, 550,1450, 550,1500, 550,1500, 550,500, 600,450, 600,450, 600,450, 500,500, 550,500, 550,450, 550,500, 550,500, 550,500, 600,450, 600,450, 550,450, 550,500, 550,500, 550,500, 550,500, 550,500, 500,500, 550,500, 500,500, 500,500, 550,500, 550,500, 550,450, 550,500, 550,500, 500,550, 500,550, 600,450, 550,500, 550,500, 550,1500, 550,1500, 550,1500, 600,1450, 550,3000, 3000,9000, 550,1500, 550,500, 550,500, 550,500, 550,500, 550,500, 550,450, 550,500, 500,550, 500,1500, 600,450, 500,500, 550,1500, 550,1450, 550,500, 550,1500, 550,500, 500,1500, 500,1550, 550,1500, 500,1500, 500,1500, 550,1500, 550,1500, 550,1450, 550,500, 550,500, 500,500, 550,1500, 550,1500, 550,1500, 550,500, 600,450, 500,550, 500,550, 500,550, 500,1500, 550,500, 550,1500, 550,1450, 550,1500, 550,500, 550,1500, 550,500, 500,1550, 550,500, 600,450, 500,550, 500,500, 500,500, 500,500, 550,500, 500,1500, 550,1450, 550,1450, 550,1500, 550};  // SONY 0

//T30
uint16_t  T30[231] = {3100,8900, 650,400, 650,1400, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 600,400, 600,1400, 650,400, 650,400, 650,1400, 650,400, 600,400, 650,1400, 650,1400, 650,1400, 650,1450, 550,1500, 600,450, 600,450, 600,450, 650,400, 600,400, 600,400, 600,400, 600,400, 600,400, 600,400, 600,400, 600,400, 600,400, 650,400, 600,450, 600,450, 600,450, 550,500, 600,450, 600,450, 600,450, 650,400, 600,450, 600,400, 600,450, 600,450, 600,400, 600,400, 600,450, 600,450, 600,400, 600,450, 600,1450, 550,1500, 550,1500, 600,1400, 600,2900, 3100,8900, 650,1400, 600,450, 600,400, 600,450, 600,450, 600,400, 600,450, 600,450, 600,450, 600,1500, 600,450, 500,550, 600,1450, 600,1400, 600,400, 600,1400, 600,450, 600,1450, 600,1450, 600,1400, 600,1450, 600,1450, 550,1500, 500,1500, 550,1450, 600,450, 600,450, 600,450, 600,1450, 600,1450, 600,1450, 600,450, 600,450, 600,450, 600,450, 600,500, 550,500, 550,1450, 550,1450, 600,1450, 600,1400, 600,450, 600,1450, 600,450, 600,1450, 600,450, 600,450, 600,450, 600,450, 600,500, 550,500, 550,450, 550,1500, 550,1450, 600,1450, 600,1450, 600};  // SONY 0

//Fan Auto
uint16_t  FanAuto[231] = {3100,8950, 550,450, 550,1450, 600,450, 550,500, 550,450, 550,450, 550,450, 500,500, 550,450, 550,1450, 550,500, 600,450, 550,1500, 550,500, 600,450, 550,1500, 550,1450, 550,1450, 550,1450, 550,1450, 600,450, 550,500, 550,450, 500,500, 550,500, 550,500, 550,500, 550,500, 600,450, 550,450, 500,550, 600,450, 600,450, 500,500, 500,500, 550,450, 550,450, 550,500, 500,500, 550,500, 500,500, 550,500, 500,550, 550,500, 550,500, 500,550, 550,500, 550,450, 500,550, 550,500, 500,500, 500,500, 500,1500, 500,1500, 550,1500, 550,1500, 500,3050, 3000,9000, 500,1500, 500,550, 500,550, 600,450, 550,500, 550,500, 500,500, 550,450, 500,500, 550,1500, 550,500, 500,500, 500,500, 550,500, 550,1450, 500,1500, 500,500, 500,1550, 600,1450, 550,1450, 550,1450, 550,1500, 550,1500, 550,1500, 550,1500, 550,500, 500,500, 500,500, 500,1500, 500,1550, 600,1450, 550,500, 500,550, 500,500, 500,500, 500,500, 500,500, 500,1500, 550,1500, 550,1500, 500,1500, 500,500, 500,550, 500,550, 500,1550, 550,500, 500,550, 500,500, 500,500, 500,500, 500,500, 500,500, 500,1500, 550,1500, 550,1500, 550,1500, 550};  // SONY 0

//Fan1
uint16_t  Fan1[231] = {3100,8950, 550,450, 550,1450, 550,450, 600,450, 600,450, 550,450, 600,450, 550,450, 550,500, 550,1450, 550,500, 550,500, 550,1500, 550,500, 550,450, 550,1450, 600,1450, 600,1450, 550,1450, 600,1450, 600,450, 550,500, 550,500, 550,500, 550,500, 550,500, 550,500, 550,450, 550,500, 550,500, 550,500, 550,500, 550,500, 550,500, 550,500, 550,500, 550,450, 550,450, 600,450, 550,500, 500,500, 550,450, 500,550, 550,500, 550,500, 550,450, 550,500, 550,450, 500,500, 550,500, 500,500, 550,450, 500,1500, 550,1500, 550,1450, 550,1450, 600,2950, 3100,8900, 550,1500, 600,450, 600,450, 550,500, 500,500, 550,500, 550,500, 550,450, 550,450, 550,1450, 550,500, 550,450, 500,1500, 550,1500, 500,550, 500,1550, 500,550, 550,1450, 500,1500, 500,1500, 550,1500, 550,1500, 500,1500, 550,1500, 550,1500, 550,500, 500,500, 500,550, 550,1500, 550,1450, 550,1450, 550,500, 550,500, 500,500, 500,500, 550,500, 550,500, 500,1500, 550,1500, 550,1500, 550,1500, 550,500, 550,1500, 600,450, 550,1450, 500,500, 500,500, 550,500, 500,500, 500,500, 550,500, 500,500, 500,1500, 550,1500, 500,1500, 500,1550, 500};  // SONY 0

//Fan2 
uint16_t  Fan2[231] = {3050,9000, 550,450, 550,1450, 600,450, 550,500, 600,450, 600,450, 600,450, 600,450, 600,450, 600,1450, 600,450, 600,450, 600,1450, 600,450, 550,500, 550,1450, 550,1450, 600,1400, 600,1450, 600,1400, 550,500, 600,450, 600,450, 550,500, 600,450, 550,500, 550,500, 550,500, 600,450, 550,450, 550,500, 500,500, 550,500, 550,500, 550,450, 550,500, 600,450, 550,500, 600,450, 550,450, 500,500, 550,500, 500,500, 500,500, 600,450, 600,450, 600,450, 550,500, 550,500, 550,500, 550,500, 550,500, 550,1500, 550,1500, 550,1450, 600,1450, 650,2900, 3000,9000, 550,1500, 550,500, 550,500, 550,450, 550,500, 500,550, 500,500, 500,500, 550,500, 500,1500, 550,500, 500,500, 500,1500, 550,1500, 550,500, 500,1500, 550,500, 550,1500, 550,1450, 500,1500, 550,1500, 550,1500, 550,1450, 550,1500, 550,1500, 550,500, 550,500, 500,500, 500,1550, 550,1500, 550,1450, 500,550, 500,500, 500,500, 500,500, 500,500, 500,500, 500,1500, 550,1500, 550,1500, 550,1500, 550,500, 500,550, 500,1550, 550,1450, 500,550, 500,500, 500,500, 500,500, 500,500, 550,500, 500,500, 500,1500, 500,1500, 550,1500, 500,1500, 550};  // SONY 0

//Fan3
uint16_t  Fan3[231] = {3100,8900, 550,500, 600,1450, 600,450, 600,400, 650,400, 650,400, 650,400, 600,400, 650,400, 650,1400, 650,400, 650,400, 600,1400, 650,400, 600,450, 600,1450, 600,1450, 600,1400, 650,1400, 650,1400, 650,400, 600,400, 650,400, 600,400, 600,400, 650,400, 600,400, 600,400, 650,450, 550,500, 600,450, 500,550, 600,450, 600,450, 600,400, 600,400, 600,400, 650,400, 600,400, 600,400, 600,400, 600,450, 600,450, 600,400, 600,450, 600,450, 600,450, 600,450, 600,450, 550,500, 600,450, 600,450, 600,1400, 650,1400, 650,1400, 650,1400, 600,2950, 3100,8900, 650,1400, 600,450, 600,450, 600,450, 600,450, 600,450, 500,550, 600,450, 600,450, 600,1400, 600,450, 600,450, 600,450, 600,1450, 600,450, 600,1450, 600,450, 600,1450, 600,1450, 600,1450, 500,1500, 600,1450, 600,1400, 600,1400, 600,1400, 600,400, 600,450, 600,450, 600,1400, 600,1450, 600,1450, 550,500, 550,450, 500,550, 600,450, 550,500, 550,450, 600,1450, 600,1450, 600,1450, 600,1450, 600,1450, 600,450, 600,1450, 600,1500, 600,450, 500,550, 550,500, 550,500, 550,450, 600,450, 600,450, 600,1450, 600,1450, 600,1450, 600,1450, 550};  // SONY 0

//Swing On
uint16_t  SwingOn[231] = {3100,8900, 600,400, 600,1400, 650,400, 600,450, 550,450, 600,400, 600,450, 600,450, 600,450, 600,1450, 550,500, 600,450, 600,1450, 600,450, 600,450, 600,1400, 600,1450, 600,1450, 600,1450, 600,1450, 600,450, 600,450, 550,500, 600,450, 500,550, 600,450, 600,450, 550,500, 600,450, 600,450, 550,450, 550,450, 600,450, 550,450, 600,450, 550,450, 550,450, 550,500, 550,450, 550,500, 600,450, 550,500, 550,500, 600,450, 550,500, 550,500, 600,450, 550,450, 550,450, 550,450, 600,450, 550,450, 550,1450, 550,1450, 550,1450, 550,1500, 550,2950, 3100,8950, 550,1500, 550,500, 550,450, 550,450, 550,450, 550,450, 550,450, 550,450, 550,450, 550,1450, 550,450, 550,500, 550,500, 550,1500, 550,1500, 500,1500, 550,500, 550,1450, 600,1450, 600,1450, 600,450, 550,1450, 550,450, 550,1450, 550,1450, 550,500, 550,500, 550,500, 500,1500, 550,1450, 550,1450, 600,450, 550,450, 550,450, 550,450, 550,450, 550,500, 550,1450, 550,1450, 550,1500, 550,1500, 500,550, 500,550, 550,500, 550,1450, 550,450, 550,500, 550,450, 550,450, 550,450, 550,450, 550,450, 550,1450, 550,1450, 550,1500, 550,1500, 600};  // SONY 0

//Swing Off
uint16_t  SwingOff[231] = {3050,8950, 600,450, 600,1400, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 600,1450, 550,500, 500,550, 600,1400, 650,450, 600,400, 600,1400, 600,1400, 600,1450, 600,1400, 600,1400, 600,450, 600,450, 600,450, 600,450, 550,450, 500,550, 550,500, 600,450, 600,450, 600,450, 600,450, 550,450, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 550,500, 600,450, 550,500, 550,500, 550,500, 600,450, 600,450, 550,450, 550,450, 600,450, 550,450, 600,450, 550,450, 550,1450, 550,1450, 550,1450, 600,1450, 600,2900, 3100,8900, 500,1500, 550,500, 550,500, 550,500, 550,450, 600,450, 550,450, 550,500, 600,450, 550,1450, 550,450, 550,500, 550,500, 550,500, 550,1500, 550,1450, 500,550, 550,1450, 550,1450, 550,1450, 550,1450, 550,1450, 550,1450, 550,1450, 550,1450, 550,500, 550,500, 550,450, 500,1500, 550,1450, 550,1450, 550,500, 550,450, 550,450, 550,450, 550,500, 550,500, 550,1450, 550,1450, 550,1500, 550,1500, 500,550, 500,550, 550,500, 550,1450, 550,450, 550,500, 550,450, 550,500, 550,500, 550,500, 550,500, 550,1450, 550,1450, 550,1500, 600,1450, 550};  // SONY 0

//Turbo On
uint16_t  TurboOn[231] = {3050,8950, 600,450, 500,1500, 550,450, 550,500, 550,450, 600,450, 600,450, 600,500, 550,500, 550,1500, 550,500, 550,450, 550,1450, 600,450, 600,450, 550,1450, 550,1450, 600,1400, 600,1450, 600,1450, 600,450, 550,500, 550,500, 600,450, 500,550, 550,500, 550,500, 550,450, 550,500, 550,450, 550,450, 550,500, 550,450, 550,450, 600,450, 550,450, 550,450, 550,450, 550,500, 550,500, 500,550, 550,450, 550,500, 550,450, 550,500, 550,500, 550,450, 550,500, 550,450, 550,500, 600,450, 550,450, 550,1450, 600,1450, 550,1450, 600,1450, 600,2900, 3100,8950, 600,1450, 550,500, 600,450, 550,500, 500,500, 550,500, 550,450, 500,500, 550,500, 500,1500, 550,500, 550,500, 500,500, 500,1550, 600,450, 550,1450, 550,500, 550,1450, 550,1450, 600,1450, 600,1450, 550,1500, 550,1450, 550,1500, 550,1500, 550,1500, 600,1450, 500,550, 550,1450, 550,1500, 550,1500, 550,500, 550,500, 550,500, 500,500, 500,500, 500,500, 500,1500, 550,1500, 500,1550, 500,1500, 550,500, 550,500, 500,500, 500,1500, 550,500, 550,500, 550,500, 550,500, 500,500, 500,500, 500,500, 500,1500, 500,1550, 600,1450, 500,1500, 550};  // SONY 0

//Turbo Off
uint16_t  TurboOff[231] = {3000,9000, 600,450, 550,1500, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 600,1450, 550,450, 550,500, 550,1450, 600,450, 600,450, 600,1450, 600,1450, 600,1450, 600,1450, 600,1450, 550,500, 500,550, 600,450, 600,450, 600,450, 500,550, 500,550, 550,500, 600,450, 550,500, 550,500, 550,500, 600,450, 550,500, 550,500, 550,500, 550,500, 550,500, 550,500, 500,550, 500,550, 500,550, 500,550, 550,500, 550,500, 500,500, 500,500, 550,500, 500,500, 500,500, 550,500, 500,500, 550,1500, 550,1500, 550,1450, 550,1500, 500,3000, 3050,9000, 500,1500, 500,550, 500,500, 550,500, 500,500, 500,500, 500,500, 500,500, 500,500, 550,1500, 550,500, 500,500, 500,550, 500,550, 500,1550, 600,1450, 500,550, 500,1500, 550,1500, 550,1500, 550,1500, 550,1500, 550,1500, 550,1500, 550,1500, 500,550, 500,550, 600,450, 500,1500, 500,1500, 500,1500, 550,500, 500,500, 500,500, 550,500, 500,500, 500,500, 500,1500, 550,1500, 500,1550, 500,1550, 550,500, 500,550, 500,500, 500,1500, 550,500, 500,500, 550,500, 500,500, 500,500, 500,500, 500,500, 500,1500, 500,1500, 500,1550, 600,1450, 550};  // SONY 0

//Auto Clean On
uint16_t  AutoCleanOn[231] = {3050,9000, 550,500, 550,1450, 600,450, 550,450, 550,450, 550,500, 600,450, 550,500, 550,500, 500,1550, 550,500, 600,450, 550,1450, 550,450, 550,500, 500,1500, 550,1450, 550,1500, 550,1500, 550,1450, 550,500, 550,500, 500,550, 550,500, 550,500, 600,450, 550,450, 550,500, 550,500, 550,450, 550,500, 500,500, 550,450, 550,500, 500,500, 550,500, 500,500, 500,500, 550,500, 550,500, 550,500, 550,500, 550,500, 550,450, 550,450, 550,500, 550,500, 550,500, 550,500, 550,500, 600,450, 500,500, 550,1450, 550,1500, 550,1500, 550,1500, 600,2950, 3050,8950, 550,1500, 550,500, 550,500, 550,500, 550,450, 550,500, 550,500, 550,500, 550,500, 550,1450, 550,500, 500,500, 500,500, 550,1450, 500,550, 500,1550, 600,450, 550,1450, 550,1500, 550,1500, 550,1450, 550,1450, 550,1450, 550,1450, 550,1500, 500,550, 550,500, 550,500, 600,1450, 500,1500, 550,1500, 550,1500, 550,500, 550,1450, 550,500, 550,500, 550,450, 500,1500, 550,1500, 500,1550, 500,1550, 550,450, 550,500, 550,500, 500,1500, 550,500, 550,500, 550,500, 500,500, 550,500, 500,500, 550,500, 550,1500, 500,1500, 500,1550, 600,1450, 550};  // SONY 0

//Auto Clean Off
uint16_t  AutoCleanOff[231] = {3100,8900, 600,450, 600,1450, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 600,400, 600,1400, 600,450, 600,400, 600,1400, 600,450, 600,450, 600,1400, 650,1450, 600,1450, 600,1450, 600,1400, 650,400, 600,400, 600,400, 600,400, 600,450, 600,450, 600,450, 600,400, 600,450, 600,450, 600,450, 600,450, 550,500, 600,450, 550,500, 550,500, 600,450, 600,450, 600,450, 600,450, 600,450, 600,400, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 550,500, 600,450, 500,1500, 600,1450, 600,1400, 600,1450, 600,2950, 3050,8950, 600,1450, 600,450, 600,450, 600,450, 600,450, 550,450, 550,500, 550,500, 600,450, 500,1500, 550,500, 550,450, 550,450, 600,1450, 600,450, 550,1450, 600,450, 600,1450, 600,1450, 600,1450, 600,1500, 550,1500, 500,1500, 550,1450, 600,1450, 600,450, 600,450, 550,450, 550,1450, 600,1450, 600,1450, 600,1450, 600,500, 550,1500, 500,550, 550,500, 550,500, 550,1450, 600,1450, 600,1450, 600,1450, 600,450, 550,450, 550,450, 550,1450, 600,450, 550,500, 550,500, 600,450, 500,550, 550,500, 550,500, 550,1450, 600,1450, 600,1450, 600,1450, 600};  // SONY 0

//Mode Auto
uint16_t  ModeAuto[231] = {3100,8950, 550,500, 550,1450, 550,500, 550,500, 550,500, 550,500, 550,500, 500,500, 550,500, 550,1500, 500,500, 550,500, 500,1550, 600,450, 550,500, 550,1450, 550,1450, 600,1450, 600,1450, 550,1500, 550,500, 550,450, 500,500, 500,500, 550,500, 500,550, 500,550, 600,450, 550,500, 500,550, 550,500, 500,500, 500,500, 500,500, 550,500, 550,450, 550,500, 500,500, 500,500, 550,500, 500,500, 500,500, 500,550, 500,550, 550,500, 600,450, 550,500, 500,500, 550,500, 500,500, 550,500, 500,500, 500,1500, 550,1500, 550,1500, 550,1500, 600,2950, 3100,8900, 550,1550, 500,550, 550,450, 500,550, 500,550, 500,500, 500,500, 500,500, 500,500, 550,1500, 550,500, 500,500, 500,1500, 500,500, 500,1500, 500,1550, 500,550, 550,1500, 550,1450, 500,1500, 550,1500, 550,1500, 550,1500, 550,1500, 550,1500, 500,500, 500,500, 500,550, 500,1550, 550,1500, 550,1500, 500,500, 500,500, 550,500, 500,500, 500,500, 500,500, 550,500, 500,500, 500,1500, 550,1500, 500,550, 500,1550, 500,1550, 550,500, 500,550, 500,550, 500,500, 550,500, 500,500, 500,500, 500,500, 500,1500, 550,1500, 550,1500, 500,1500, 550};  // SONY 0

//Mode Cool
uint16_t  ModeCool[231] = {3100,8900, 600,400, 600,1400, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 600,1450, 550,500, 550,500, 600,1450, 600,450, 600,450, 600,1400, 600,1400, 600,1400, 600,1400, 600,1400, 600,450, 600,450, 600,450, 600,450, 500,550, 550,500, 600,450, 600,450, 600,450, 600,450, 600,450, 600,400, 600,450, 550,500, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 550,500, 550,450, 550,500, 550,500, 600,450, 600,450, 550,500, 600,450, 600,450, 600,450, 600,1400, 550,1450, 600,1450, 550,1500, 600,2900, 3050,8950, 550,1500, 600,450, 550,500, 550,500, 550,500, 600,450, 600,450, 550,500, 550,500, 550,1450, 600,450, 550,500, 600,450, 600,450, 550,1500, 500,1500, 500,500, 600,1450, 550,1450, 550,1450, 550,1450, 600,1450, 550,1450, 550,1450, 550,1500, 550,500, 550,500, 550,500, 500,1500, 550,1500, 550,1450, 550,450, 550,500, 550,500, 550,500, 550,500, 550,500, 550,1450, 550,1450, 550,1500, 550,1500, 500,550, 500,550, 600,450, 550,1450, 550,500, 550,500, 550,500, 550,500, 550,500, 550,500, 550,500, 550,1450, 550,1450, 550,1500, 550,1500, 550};  // SONY 0

//Mode Dry
uint16_t  ModeDry[231] = {3050,8950, 600,450, 550,1450, 550,500, 550,500, 600,450, 550,450, 550,500, 550,500, 550,500, 550,1450, 550,500, 500,500, 550,1500, 550,500, 600,450, 600,1450, 550,1450, 550,1500, 550,1450, 550,1450, 550,500, 550,500, 550,500, 500,500, 500,500, 550,500, 550,500, 500,550, 500,550, 600,450, 550,500, 550,500, 550,500, 550,500, 550,500, 500,500, 500,500, 500,500, 500,500, 550,500, 550,500, 550,500, 550,500, 550,500, 550,500, 500,550, 500,550, 600,450, 550,450, 550,450, 500,500, 550,500, 550,1450, 550,1500, 550,1500, 550,1500, 550,3050, 3000,9000, 500,1500, 500,550, 550,500, 500,550, 600,450, 550,500, 500,550, 550,500, 550,450, 550,1500, 550,500, 550,500, 500,500, 550,1500, 550,1500, 500,1500, 550,550, 500,1550, 500,1550, 500,1500, 500,1500, 550,1450, 550,1500, 550,1500, 550,1500, 550,500, 500,500, 500,500, 500,1500, 500,1550, 550,1500, 550,500, 500,550, 500,550, 500,500, 500,500, 500,500, 500,500, 500,500, 500,1500, 550,1500, 550,500, 500,500, 500,550, 500,550, 500,1550, 600,450, 550,500, 500,550, 500,550, 500,500, 550,500, 500,1500, 550,1500, 550,1500, 550,1500, 600};  // SONY 0

//Mode Fan
uint16_t  ModeFan[231] = {3150,8900, 600,450, 600,1400, 650,400, 650,400, 650,400, 650,400, 650,400, 650,400, 650,400, 650,1400, 650,400, 650,400, 650,1400, 650,450, 600,450, 500,1500, 600,1400, 600,1400, 650,1400, 650,1400, 650,400, 650,400, 650,400, 650,400, 650,400, 650,400, 650,400, 650,450, 600,450, 600,450, 500,550, 600,450, 600,450, 650,400, 650,400, 650,400, 650,400, 650,400, 650,400, 650,400, 600,400, 650,400, 600,400, 650,400, 600,400, 650,450, 600,450, 600,450, 500,550, 600,450, 600,450, 600,450, 600,1400, 650,1400, 650,1400, 650,1400, 600,2950, 3100,8900, 600,1400, 600,400, 600,450, 600,450, 550,500, 550,500, 550,500, 550,500, 600,450, 600,1400, 600,450, 600,450, 600,450, 600,400, 600,1450, 650,1400, 600,450, 600,1450, 550,1500, 550,1450, 600,1450, 550,1450, 600,1400, 600,1450, 650,1400, 650,400, 600,450, 600,400, 600,1450, 600,1450, 600,1450, 500,550, 550,500, 550,500, 550,500, 600,450, 600,450, 600,450, 600,450, 600,1450, 600,1450, 600,450, 600,1450, 600,450, 600,1500, 600,1450, 500,550, 550,500, 550,500, 600,450, 600,450, 600,450, 600,1450, 600,1450, 600,1450, 600,1450, 550};  // SONY 0

//Mode Heat
uint16_t  ModeHeat[231] = {3100,8900, 600,450, 600,1400, 600,450, 600,450, 600,450, 600,450, 600,450, 550,500, 600,450, 600,1450, 550,500, 550,450, 550,1450, 600,450, 600,450, 600,1400, 600,1400, 600,1400, 600,1400, 600,1400, 600,450, 550,500, 550,500, 600,450, 550,500, 500,500, 600,450, 600,450, 600,450, 600,450, 600,450, 550,450, 600,450, 550,450, 550,450, 550,500, 600,450, 550,450, 600,450, 550,500, 600,450, 600,450, 550,500, 500,550, 550,500, 600,450, 600,450, 550,450, 550,450, 600,450, 600,450, 600,450, 550,1450, 550,1450, 550,1450, 600,1450, 550,2950, 3050,8950, 500,1500, 600,450, 550,500, 550,450, 550,450, 550,450, 550,500, 550,500, 550,450, 550,1450, 550,450, 550,500, 550,500, 550,1500, 550,1500, 500,1500, 550,500, 600,1450, 550,1450, 550,1450, 550,1450, 550,1450, 550,1450, 550,1450, 550,1500, 550,500, 550,500, 500,550, 500,1500, 550,1450, 550,1450, 550,500, 550,450, 550,450, 550,500, 550,500, 550,450, 550,500, 550,500, 550,1500, 550,1500, 550,500, 500,550, 500,550, 550,500, 550,500, 550,1450, 550,450, 550,450, 550,450, 550,500, 550,500, 550,1450, 550,1450, 550,1500, 550,1500, 600};  // SONY 0

//SmartSaver On
uint16_t  SmartSaverOn[231] = {3100,8900, 650,400, 650,1400, 650,400, 650,400, 650,400, 650,400, 650,400, 650,400, 650,450, 600,1450, 600,450, 600,450, 600,1400, 650,400, 650,400, 650,1400, 650,1400, 650,1400, 650,1400, 650,1400, 650,400, 650,450, 600,450, 600,450, 500,550, 600,450, 600,450, 600,400, 650,400, 650,400, 650,400, 650,400, 650,400, 650,400, 650,400, 600,400, 650,400, 650,400, 600,400, 600,450, 600,450, 600,450, 550,500, 600,450, 600,450, 600,400, 650,400, 650,400, 650,400, 650,400, 650,400, 650,400, 600,1400, 650,1400, 650,1400, 650,1450, 650,2900, 3150,8900, 600,1450, 600,450, 650,400, 650,400, 650,400, 650,400, 600,400, 600,450, 600,400, 600,1400, 650,400, 600,400, 650,1400, 600,1450, 600,450, 550,1450, 600,450, 600,1400, 600,1400, 600,1450, 650,400, 600,1400, 650,400, 600,1400, 650,1400, 600,1500, 600,1450, 550,1450, 550,1450, 600,1400, 600,1400, 600,450, 600,450, 600,450, 600,450, 600,450, 600,450, 600,1450, 650,1450, 550,1500, 550,1450, 600,450, 550,500, 600,450, 600,1400, 600,450, 600,450, 600,450, 600,400, 600,450, 600,450, 600,450, 600,1450, 600,1500, 550,1500, 550,1450, 600};  // SONY 0

//SmartSaver Off
uint16_t  SmartSaverOff[231] = {3100,8900, 600,400, 600,1400, 600,400, 600,400, 600,400, 600,450, 600,450, 600,450, 600,450, 600,1450, 600,450, 600,450, 600,1400, 600,400, 600,400, 600,1400, 600,1400, 600,1400, 600,1400, 600,1450, 650,400, 600,450, 600,450, 550,500, 550,500, 600,450, 550,500, 600,450, 600,450, 600,450, 600,400, 600,450, 550,450, 600,450, 600,450, 550,450, 600,450, 600,450, 600,450, 600,450, 550,500, 500,550, 500,550, 550,500, 600,450, 600,450, 600,450, 550,450, 600,450, 550,450, 550,450, 550,450, 600,1400, 600,1400, 600,1450, 600,1450, 600,2900, 3100,8900, 550,1450, 550,450, 550,450, 550,450, 600,450, 600,450, 600,450, 550,450, 550,450, 550,1450, 600,450, 550,450, 600,450, 550,1500, 600,1450, 550,1500, 550,500, 550,1450, 600,1450, 600,1450, 600,450, 600,1450, 600,450, 600,1450, 600,1450, 600,500, 550,500, 550,500, 500,1500, 550,1450, 550,1450, 600,450, 550,450, 600,450, 550,450, 600,450, 550,450, 550,1450, 600,1450, 600,1500, 550,1500, 500,550, 550,500, 550,500, 550,1450, 600,450, 550,450, 600,450, 550,450, 600,450, 600,450, 550,450, 550,1450, 600,1450, 600,1500, 600,1450, 600};  // SONY 0


//for LED status
#include <Ticker.h>
Ticker ticker;

void tick()
{
  //toggle state
  int state = digitalRead(BUILTIN_LED);  // get the current state of GPIO1 pin
  digitalWrite(BUILTIN_LED, !state);     // set pin to the opposite state
}

void setup()
{
  // put your setup code here, to run once:
  Serial.begin(BaudRate);

  irsend.begin();
  rtc.begin();
  dht.begin();
  
//set led pin as output
  pinMode(BUILTIN_LED, OUTPUT);
  // start ticker with 0.5 because we start in AP mode and try to connect
  ticker.attach(0.2, tick);

#ifdef USE_ESP8266_WIFI_MANAGER
  WiFiManager wifiManager;

  wifiManager.setTimeout(wifimanager_timeout_setup);

  if (!wifiManager.autoConnect("WASISTech Climate"))
  { // might not need if statement
    Serial.println("failed to connect, we should reset as see if it connects");
    if (WiFi.status() != WL_CONNECTED)
    {
      Serial.println("Failed to connect to internet");
    }
    delay(3000);
  }

#endif

  Blynk.config(auth_code, blynk_server);

  if (Blynk.connect())
  {

    Serial.println("BLYNK is Connected!");

    // rtc.begin();
  }

  else
  {
    Serial.println("BLYNK is Not Connected!");
  }

#ifdef USE_ESP8266

  ArduinoOTA.setPort(8266);

  // Hostname defaults to esp8266-[ChipID]
  ArduinoOTA.setHostname("WASISTech Energy Monitoring");

  // No authentication by default
  ArduinoOTA.setPassword((const char *)"");

  ArduinoOTA.onStart([]() {
    Serial.println("Start");
  });
  ArduinoOTA.onEnd([]() {
    Serial.println("\nEnd");
  });
  ArduinoOTA.onProgress([](unsigned int progress, unsigned int total) {
    Serial.printf("Progress: %u%%\r", (progress / (total / 100)));
  });
  ArduinoOTA.onError([](ota_error_t error) {
    Serial.printf("Error[%u]: ", error);
    if (error == OTA_AUTH_ERROR)
      Serial.println("Auth Failed");
    else if (error == OTA_BEGIN_ERROR)
      Serial.println("Begin Failed");
    else if (error == OTA_CONNECT_ERROR)
      Serial.println("Connect Failed");
    else if (error == OTA_RECEIVE_ERROR)
      Serial.println("Receive Failed");
    else if (error == OTA_END_ERROR)
      Serial.println("End Failed");
  });
  ArduinoOTA.begin();
#endif

  timer_ids[0] = timer.setInterval(25000L, reconnectBlynk); // check every 10s time if still connected to server
  timer_ids[1] = timer.setInterval(1000L, im_connected);

  ticker.detach();
  //keep LED on
  digitalWrite(BUILTIN_LED, LOW);   
}

void im_connected()
{
  Serial.print(counter++);
  if (Blynk.connected())
  {

    Serial.println(" : All good and connected to Blynk!");
  }
  else
  {
    Serial.println(" : Seemed to have lost connected to Blynk :-(");
  }
}

void loop()
{
  // put your main code here, to run repeatedly:

  if (Blynk.connected() == true)
  {

    Blynk.run();
  }
  timer.run();

#ifdef USE_ESP8266
  ArduinoOTA.handle();
#endif

#ifdef USE_ESP8266
  ESP.wdtFeed(); // feed watchdog
#endif

  // set the brightness of pin 2:
  analogWrite(BUILTIN_LED, brightness);

  // change the brightness for next time through the loop:
  brightness = brightness + fadeAmount;

  // reverse the direction of the fading at the ends of the fade:
  if (brightness == 0 || brightness == 1020) {
    fadeAmount = -fadeAmount ;
  }
  // wait for 30 milliseconds to see the dimming effect
  delay(5);
  
}

//===== RE CONNECT IF BLYNK NOT CONNECTED =====
void reconnectBlynk()
{

#ifdef DEBUG_TIMER
  Serial.println("timer_ids[x] = reconnectBlynk()");
#endif

  bool internet_connected = true;

  if (Blynk.connected() == false)
  {
    Serial.println("******************************* In reconnect");

#ifdef USE_ESP8266
    ESP.wdtFeed();
#endif

#ifdef USE_ESP8266_FIXED_WIFI
    if (WiFi.status() != WL_CONNECTED)
    {
#ifdef USE_ESP8266
      ESP.wdtDisable();
#endif
      WiFi.begin(ssid, pass); // Connect to WiFi network
      Serial.println("Waiting to connect to Wifi:");
      long waittime = millis() + 7000; // 7 seconds wait time
      while (WiFi.status() != WL_CONNECTED)
      { // Wait for board to connect to WiFi network
        delay(500);
        Serial.print(".");
        if (millis() > waittime)
        {
          break;
          internet_connected = false;
        }
      }
      Serial.println(" ");
#ifdef USE_ESP8266
      ESP.wdtEnable(WDTO_8S); // enable Watch Dog Time WDT for 8s
#endif
    }
#endif // use_esp8266_fixed_wifi

#ifdef USE_ESP8266_WIFI_MANAGER
    if (WiFi.status() != WL_CONNECTED)
    {
#ifdef USE_ESP8266
      ESP.wdtDisable();
#endif
      WiFiManager wifiManager;

      wifiManager.setTimeout(wifimanager_timeout_reconnect); // wait for 90 seconds until timeout

      if (!wifiManager.autoConnect("esp8266 WiFi"))
      { // might not need if statement
        Serial.println("failed to connect, we should reset as see if it connects");
        internet_connected = false;
        delay(3000);
      }
#ifdef USE_ESP8266
      ESP.wdtEnable(WDTO_8S); // enable Watch Dog Time WDT for 8s
#endif
    }
#endif // use_esp8266_wifi_manager

#ifdef USE_ESP8266
    ESP.wdtDisable();
    Serial.println("reconnectBlynk(): WDT disabled");
#endif

    if (internet_connected)
    {
      Serial.println("reconnectBlynk(): Before Blynk.connect");
      if (Blynk.connect(4333))
      {
        Serial.println("reconnectBlynk(): After Blynk.connect successfull");

#ifdef USE_ESP8266
        ESP.wdtEnable(WDTO_8S); // enable Watch Dog Time WDT for 8s

        Serial.println("reconnectBlynk(): WDT enabled");
#endif
      }
      else
      {
        Serial.println("reconnectBlynk(): After Blynk.connect UN-successfull");

#ifdef USE_ESP8266
        ESP.wdtEnable(WDTO_8S); // enable Watch Dog Time WDT for 8s   //

        Serial.println("reconnectBlynk(): WDT enabled");
#endif
      }
    } // end internet connectection
    else
    {
      Serial.println("We don't have internet connection !");

#ifdef USE_ESP8266
      ESP.wdtEnable(WDTO_8S); // enable Watch Dog Time WDT for 8s   //

      Serial.println("reconnectBlynk(): WDT enabled");
#endif
    }
    Serial.println("reconnectBlynk(): restarting timer and exiting function");
    timer.restartTimer(timer_ids[0]); // restart "reconnect" timer
  }                                   // end if !blynk_connected
}

// Digital clock display of the time
void clockDisplay()
{
  // You can call hour(), minute(), ... at any time
  // Please see Time library examples for details

  String currentTime = String(hour()) + ":" + minute() + ":" + second();
  String currentDate = String(day()) + " " + month() + " " + year();
  Serial.print("Current time: ");
  Serial.print(currentTime);
  Serial.print(" ");
  Serial.print(currentDate);
  Serial.println();

  // Send time to the App
  Blynk.virtualWrite(V13, currentTime);
  // Send date to the App
  Blynk.virtualWrite(V14, currentDate);
}

void sendWifi() {
  wifisignal = map(WiFi.RSSI(), -105, -40, 0, 100);
}

void sendSensor()
{
  float h = dht.readHumidity();
  float t = dht.readTemperature(); // or dht.readTemperature(true) for Fahrenheit

  if (isnan(h) || isnan(t)) {
    Serial.println("Failed to read from DHT sensor!");
    return;
  }
  // You can send any value at any time.
  // Please don't send more that 10 values per second.
  Blynk.virtualWrite(V11, t);
  Blynk.virtualWrite(V12, h);
  
  Serial.print("Humidity: ");
  Serial.print(h);
  Serial.println(" %\t");
  Serial.print("Temperature: ");
  Serial.print(t);
  Serial.println(" *C ");
}

void reset() {
  //reset settings to defaults
  /*
    WMSettings defaults;
    settings = defaults;
    EEPROM.begin(512);
    EEPROM.put(0, settings);
    EEPROM.end();
  */
  //reset wifi credentials
  WiFi.disconnect();
  delay(1000);
  ESP.reset();
  delay(1000);
}

BLYNK_WRITE(V0) // Reset Wifi SSID and Credential
{
  int a = param.asInt();
  if (a != 0) {
    reset();
    Serial.println("Reset Wifi SSID and Credential");
  }
}

BLYNK_WRITE(V1) // On
{
  int a = param.asInt();
  if (a != 0) {
    irsend.sendRaw(On, 347, 38);  // Send a raw data capture at 38kHz.
    Serial.println("AC On");
  }
}

BLYNK_WRITE(V2) // Off
{
  int a = param.asInt();
  if (a != 0) {
    irsend.sendRaw(Off, 347, 38);  // Send a raw data capture at 38kHz.
    Serial.println("AC Off");
  }
}

BLYNK_WRITE(V3) // Slider temperature
{
  int a = param.asInt();
  switch (a) {
    case 16:
      irsend.sendRaw(T16, 231, 38);  // Send a raw data capture at 38kHz.
      Serial.println("Temp 16");
      //do something when var equals 1
      break;
    case 17:
      irsend.sendRaw(T17, 231, 38);  // Send a raw data capture at 38kHz.
      Serial.println("Temp 17");
      //do something when var equals 2
      break;
    case 18:
      irsend.sendRaw(T18, 231, 38);  // Send a raw data capture at 38kHz.
      Serial.println("Temp 18");
      //do something when var equals 2
      break;
    case 19:
      irsend.sendRaw(T19, 231, 38);  // Send a raw data capture at 38kHz.
      Serial.println("Temp 19");
      //do something when var equals 2
      break;
    case 20:
      irsend.sendRaw(T20, 231, 38);  // Send a raw data capture at 38kHz.
      Serial.println("Temp 20");
      //do something when var equals 2
      break;
    case 21:
      irsend.sendRaw(T21, 231, 38);  // Send a raw data capture at 38kHz.
      Serial.println("Temp 21");
      //do something when var equals 2
      break;
    case 22:
      irsend.sendRaw(T22, 231, 38);  // Send a raw data capture at 38kHz.
      Serial.println("Temp 22");
      //do something when var equals 2
      break;
    case 23:
      irsend.sendRaw(T23, 231, 38);  // Send a raw data capture at 38kHz.
      Serial.println("Temp 23");
      //do something when var equals 2
      break;
    case 24:
      irsend.sendRaw(T24, 231, 38);  // Send a raw data capture at 38kHz.
      Serial.println("Temp 24");
      //do something when var equals 2
      break;
    case 25:
      irsend.sendRaw(T25, 231, 38);  // Send a raw data capture at 38kHz.
      Serial.println("Temp 25");
      //do something when var equals 2
      break;
    case 26:
      irsend.sendRaw(T26, 231, 38);  // Send a raw data capture at 38kHz.
      Serial.println("Temp 26");
      //do something when var equals 2
      break;
    case 27:
      irsend.sendRaw(T27, 231, 38);  // Send a raw data capture at 38kHz.
      Serial.println("Temp 27");
      //do something when var equals 2
      break;
    case 28:
      irsend.sendRaw(T28, 231, 38);  // Send a raw data capture at 38kHz.
      Serial.println("Temp 28");
      //do something when var equals 2
      break;
    case 29:
      irsend.sendRaw(T29, 231, 38);  // Send a raw data capture at 38kHz.
      Serial.println("Temp 29");
      //do something when var equals 2
      break;
    case 30:
      irsend.sendRaw(T30, 231, 38);  // Send a raw data capture at 38kHz.
      Serial.println("Temp 30");
      //do something when var equals 2
      break;      
    default: 
      // if nothing else matches, do the default
      // default is optional
    break;
  }  
}

BLYNK_WRITE(V4) // Step temperature
{
  int a = param.asInt();
  switch (a) {
    case 16:
      irsend.sendRaw(T16, 231, 38);  // Send a raw data capture at 38kHz.
      Serial.println("Temp 16");
      //do something when var equals 1
      break;
    case 17:
      irsend.sendRaw(T17, 231, 38);  // Send a raw data capture at 38kHz.
      Serial.println("Temp 17");
      //do something when var equals 2
      break;
    case 18:
      irsend.sendRaw(T18, 231, 38);  // Send a raw data capture at 38kHz.
      Serial.println("Temp 18");
      //do something when var equals 2
      break;
    case 19:
      irsend.sendRaw(T19, 231, 38);  // Send a raw data capture at 38kHz.
      Serial.println("Temp 19");
      //do something when var equals 2
      break;
    case 20:
      irsend.sendRaw(T20, 231, 38);  // Send a raw data capture at 38kHz.
      Serial.println("Temp 20");
      //do something when var equals 2
      break;
    case 21:
      irsend.sendRaw(T21, 231, 38);  // Send a raw data capture at 38kHz.
      Serial.println("Temp 21");
      //do something when var equals 2
      break;
    case 22:
      irsend.sendRaw(T22, 231, 38);  // Send a raw data capture at 38kHz.
      Serial.println("Temp 22");
      //do something when var equals 2
      break;
    case 23:
      irsend.sendRaw(T23, 231, 38);  // Send a raw data capture at 38kHz.
      Serial.println("Temp 23");
      //do something when var equals 2
      break;
    case 24:
      irsend.sendRaw(T24, 231, 38);  // Send a raw data capture at 38kHz.
      Serial.println("Temp 24");
      //do something when var equals 2
      break;
    case 25:
      irsend.sendRaw(T25, 231, 38);  // Send a raw data capture at 38kHz.
      Serial.println("Temp 25");
      //do something when var equals 2
      break;
    case 26:
      irsend.sendRaw(T26, 231, 38);  // Send a raw data capture at 38kHz.
      Serial.println("Temp 26");
      //do something when var equals 2
      break;
    case 27:
      irsend.sendRaw(T27, 231, 38);  // Send a raw data capture at 38kHz.
      Serial.println("Temp 27");
      //do something when var equals 2
      break;
    case 28:
      irsend.sendRaw(T28, 231, 38);  // Send a raw data capture at 38kHz.
      Serial.println("Temp 28");
      //do something when var equals 2
      break;
    case 29:
      irsend.sendRaw(T29, 231, 38);  // Send a raw data capture at 38kHz.
      Serial.println("Temp 29");
      //do something when var equals 2
      break;
    case 30:
      irsend.sendRaw(T30, 231, 38);  // Send a raw data capture at 38kHz.
      Serial.println("Temp 30");
      //do something when var equals 2
      break;      
    default: 
      // if nothing else matches, do the default
      // default is optional
    break;
  }  
}

BLYNK_WRITE(V5) // Fan
{
  int a = param.asInt();
  switch (a) {
    case 1:
      irsend.sendRaw(Fan1, 231, 38);  // Send a raw data capture at 38kHz.
      Serial.println("Temp 16");
      //do something when var equals 1
      break;
    case 2:
      irsend.sendRaw(Fan2, 231, 38);  // Send a raw data capture at 38kHz.
      Serial.println("Temp 17");
      //do something when var equals 2
      break;
    case 3:
      irsend.sendRaw(Fan3, 231, 38);  // Send a raw data capture at 38kHz.
      Serial.println("Temp 18");
      //do something when var equals 2
      break;
    case 4:
      irsend.sendRaw(FanAuto, 231, 38);  // Send a raw data capture at 38kHz.
      Serial.println("Temp 19");
      //do something when var equals 2
      break;
          
    default: 
      // if nothing else matches, do the default
      // default is optional
    break;
  }  
}

BLYNK_WRITE(V6) // On+ModeCool+16°C+Fan3
{
  int a = param.asInt();
  if (a != 0) {
    irsend.sendRaw(On, 347, 38);  // Send a raw data capture at 38kHz.
    delay(2000);
    irsend.sendRaw(ModeCool, 231, 38);  // Send a raw data capture at 38kHz.
    delay(2000);
 //   irsend.sendRaw(T16, 231, 38);  // Send a raw data capture at 38kHz.
 //   delay(2000);
    irsend.sendRaw(Fan3, 231, 38);  // Send a raw data capture at 38kHz.
    delay(2000);    
    Serial.println("AC Off");
  }
}

BLYNK_WRITE(V8) // Mode Cool
{
  int a = param.asInt();
  if (a != 0) {
    irsend.sendRaw(ModeCool, 231, 38);  // Send a raw data capture at 38kHz.
    terminal.println("ModeCool");
    terminal.flush();
  }
}

BLYNK_WRITE(V9) // Turbo On
{
  int a = param.asInt();
  if (a != 0) {
    irsend.sendRaw(TurboOn, 231, 38);  // Send a raw data capture at 38kHz.
    terminal.println("Turbo On");
    terminal.flush();
  }
}

BLYNK_WRITE(V10) // Turbo Off
{
  int a = param.asInt();
  if (a != 0) {
    irsend.sendRaw(TurboOff, 231, 38);  // Send a raw data capture at 38kHz.
    terminal.println("Turbo Off");
    terminal.flush();
  }
}

BLYNK_WRITE(V15) // Swing On
{
  int a = param.asInt();
  if (a != 0) {
    irsend.sendRaw(SwingOn, 231, 38);  // Send a raw data capture at 38kHz.
    terminal.println("Swing On");
    terminal.flush();
  }
}

BLYNK_WRITE(V16) // Swing Off
{
  int a = param.asInt();
  if (a != 0) {
    irsend.sendRaw(SwingOff, 231, 38);  // Send a raw data capture at 38kHz.
    terminal.println("Swing On");
    terminal.flush();
  }
}
